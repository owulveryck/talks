# Gorgonia

Olivier Wulveryck
25 Aug 2020
owulveryck@octo.com

## About

Gorgonia is an open-source library for numerical computation. It is written in Go.
Think of it as an equivalent to _Tensorflow_, but in Go.

.image https://gorgonia.org/images/logo/gorgonia.svg

This talk is an introduction to a new computation _engine_ in Gorgonia called __GoMachine__

## Agenda

- Go, briefly (why Go after all)
- Numerical computation briefly
- How gorgonia works Gorgonia
- The GoMachine!


## Go

Go is a **compiled, concurrent, garbage-collected, statically typed** language developed at Google. 

It is an open source project: Google imports the public repository rather than the other way around.

The Go programming language was conceived in late 2007 as an answer to some of the problems we were seeing developing software infrastructure at Google. 

> _Go is a programming language designed by Google to help solve Google's problems, and Google has big problems._ - Rob Pike

[Go at Google: Language Design in the Service of Software Engineering](https://talks.golang.org/2012/splash.article)

## Why Go?

*Go is 90% perfect, 100% of the time.*

- Idiomatic (there is one way to _Go_)
- Easy to write
- Efficient native tooling (tests, benchmarks, profiling, ...)
- Built-in concurrency
- DevOps friendly (easy to deploy, easy to maintain, ...)

## Exemple

.play -edit example1/main.go

## Tests

.code -edit example1/main_test.go /func Test/,/^}/

.code -edit example1/main_test.go /func Bench/,/^}/

## Concurrency 

## Greetings professor Falken, Shall we play a game?

Ping and Pong:
- gets a ball X, 
- keep it for 200ms 
- release the ball when he writes "pingX" on screen

Each set is 5 rallies (5 balls, pong does not send the ball back to ping)

Game can be multi-court (one column per court).

Make it as fast as we can.

## Simple Ping Pong

.play -edit pingpong/1/main.go /func playerPing/,/END/

## Several players

.play -edit pingpong/2/main.go /func main/,/END/

## Make it faster by running several players in concurrence

Go has a concept of goroutine. A goroutine is a lightweight thread managed by the Go runtime.


From the [documentation](https://golang.org/doc/effective_go.html#goroutines):

> They're called goroutines because the existing terms—threads, coroutines, processes, and so on—convey inaccurate connotations. 

> A goroutine has a simple model: **it is a function executing concurrently with other goroutines in the same address space**. It is lightweight, costing little more than the allocation of stack space. And the stacks start small, so they are cheap, and grow by allocating (and freeing) heap storage as required.

## Usage

We use the `go` keyword to send a function in a seperate goroutine.

.play -edit goroutine/main.go /func add/,/END/

## Several players in parallel

.play -edit pingpong/3/main.go /func main/,/END/

## Optimizing?

Think like a player, not like the game :)

a player should:

- wait for the ball
- play with it
- send the ball
- ping/pong

## Go channel

So synchronize the goroutines, we use channels of communication.

A channel carries any go value between a sender and a receiver. 

A channel is like an event queue. 

Most important: **a channel is blocking**: it stops the execution of the goroutine until:

- there is something to read (receiving channel)
- there is a place in the queue to write something (sending channel)

## channel example

.play -edit channels/main.go /func add/,/END/

## Back to the ping pong

## Parallel to Concurrent / Orchestration to Choreography

.code -edit pingpong/5/main.go /START_LAUNCHER/,/END_PLAYER/


## Sending a ball

.code -edit pingpong/5/main.go /func send/,/^}/

## 

.play -edit pingpong/5/main.go /for play/,/END_FOR/


## Gorgonia

##
Gorgonia is an open-source library for numerical computation. It is written in Go.
Think of it as an equivalent to _Tensorflow_, but in Go.

.image https://gorgonia.org/images/logo/gorgonia.svg

Gorgonia computes *big equations* composed of values (scalars or tensors). 

It also evaluates the gradient via symbolic differentiation and automatic differentiation

## Basic principles

## Equations are graphs

Gorgonia is using the graph representation of a mathematical expression.

<script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
<script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>


Let's transform this equation:
$$f(X) = \sigma(W \cdot X+b)$$

into something mode "functional":
$$f(X) = \sigma(add(mul(W,X),B))$$

##  Equations are graphs

This equation can easily be represented into a graph:

.image assets/graph1.png

## Gorgonia workflow

- Create an **expression graph**
- Add some nodes (placeholders for values and operations)
- Set some values in the placeholders
- compile and run the graph 
- extract the result

## Gorgonia Example

.play -edit gorgonia/1/main.go /g :=/,/fmt/

## The graph

.play -edit gorgonia/2/main.go /g :=/,/}/

.image gorgonia/2/graph.svg

## Bigger graph Tiny Yolo v2

.image assets/tiny-yolov2.svg 500 _

## The Expression Graph is a program

> A computer program is a collection of instructions that can be executed by a computer to perform a specific task.

The program needs a machine to be executed.

## Gorgonia's VM

Gorgonia is using the notion of VM. The goal of a VM is

- to turn the graph into a set of instructions
- to execute those instruction.

Evaluating the instructions is equivalent to calculating the mathematical expression.

## Gorgonia's existing VM

- The Tape Machine (based on instructions, registers, etc... conventional CPUs)
- [The lisp machine](https://frank-buss.de/lispcpu/) (based on s-expression, aka lisp-cpu)

## The Go Machine

Think like a vertex!

- Concurrent VM built on top of Go capabilities
- Concurrent achitecture similar to [T9000 transputer](https://en.wikipedia.org/wiki/Transputer) 


## Example

$$f(X) = \sigma(W \cdot X+b)$$

.image assets/graph1.png

## The states of the node

I am `mul`, I can be in the following states:

- I am waiting for an input (X or Y)
- I am computing `X * Y`
- I am sending the output

## What is a node

.code gorgonia/code/node.go /type node/,/}/

## A state function

A state function defines something that needs to be done when in a state, and returns
a new state function.

.code gorgonia/code/node.go /type stateFn/,/$/

## Default state

.code gorgonia/code/node.go /START_DEFAULT/,/END_DEFAULT/

## Waiting for input state

.code gorgonia/code/node.go /START_RECEIVE/,/END_RECEIVE/

## Compute state

.code gorgonia/code/node.go /START_COMPUTEFWD/,/END_COMPUTEFWD/

## Emit output

.code gorgonia/code/node.go /START_EMIT/,/END_EMIT/

## Implementation of the state machine

.code gorgonia/code/node.go /START_COMPUTE OMIT/,/END_COMPUTE/

## Plumbing

## From queues to pubsub

Channels are queues: it is a one-to-one communication channel.

We need to create a structure to handle the delivery of messages
from several producers to several consumers:

A publish subscribe mechanism

## Publisher

.code gorgonia/code/pubsub.go /type publisher/,/}/

.image assets/publisher.svg

## Subscriber

.code gorgonia/code/pubsub.go /type subscriber/,/}/

.image assets/subscriber.svg

## pubsub 

the pubsub structure is an aggregate of publishers.

Running the pubsub, is triggering a mechanism of merge and broadcast to 
the different channels.

.code gorgonia/code/pubsub.go /type pubsub/,/}/

.code gorgonia/code/pubsub.go /func/,/{/

## Equation

$$f(X) = \sigma(W \cdot X+b)$$

.image assets/graph.svg 120 _


## Design and quality of code

## Example

## Tracing

.iframe vizu.html 550 1000

## performances ?

## Original Tiny Yolo v2

```
❯ time ./darknet detector test cfg/voc.data cfg/yolov2-tiny-voc.cfg yolov2-tiny-voc.weights dog_416x416.jpg

layer     filters    size              input                output
    0 conv     16  3 x 3 / 1   416 x 416 x   3   ->   416 x 416 x  16  0.150 BFLOPs
    1 max          2 x 2 / 2   416 x 416 x  16   ->   208 x 208 x  16
    2 conv     32  3 x 3 / 1   208 x 208 x  16   ->   208 x 208 x  32  0.399 BFLOPs
    3 max          2 x 2 / 2   208 x 208 x  32   ->   104 x 104 x  32
    4 conv     64  3 x 3 / 1   104 x 104 x  32   ->   104 x 104 x  64  0.399 BFLOPs
    5 max          2 x 2 / 2   104 x 104 x  64   ->    52 x  52 x  64
    6 conv    128  3 x 3 / 1    52 x  52 x  64   ->    52 x  52 x 128  0.399 BFLOPs
    7 max          2 x 2 / 2    52 x  52 x 128   ->    26 x  26 x 128
    8 conv    256  3 x 3 / 1    26 x  26 x 128   ->    26 x  26 x 256  0.399 BFLOPs
    9 max          2 x 2 / 2    26 x  26 x 256   ->    13 x  13 x 256
   10 conv    512  3 x 3 / 1    13 x  13 x 256   ->    13 x  13 x 512  0.399 BFLOPs
   11 max          2 x 2 / 1    13 x  13 x 512   ->    13 x  13 x 512
   12 conv   1024  3 x 3 / 1    13 x  13 x 512   ->    13 x  13 x1024  1.595 BFLOPs
   13 conv   1024  3 x 3 / 1    13 x  13 x1024   ->    13 x  13 x1024  3.190 BFLOPs
   14 conv    125  1 x 1 / 1    13 x  13 x1024   ->    13 x  13 x 125  0.043 BFLOPs
   15 detection
mask_scale: Using default '1.000000'
Loading weights from yolov2-tiny-voc.weights...Done!
dog_416x416.jpg: Predicted in 0.864982 seconds.
dog: 81%
car: 77%
./darknet detector test cfg/voc.data cfg/yolov2-tiny-voc.cfg  dog_416x416.jpg  1.30s user 0.12s system 97% cpu 1.447 total
```

## Gorgonia
```
❯ GOMAXPROCS=2 ./tiny-yolo-v2-coco data/dog_416x416.jpg
Feedforwarded in: 737.373421ms
Detections:
2020/08/20 18:26:49 &{0.62552494 {{36 40} {313 323}} bicycle 0.9989906}
2020/08/20 18:26:49 &{0.61838317 {{70 153} {211 386}} dog 0.98060095}
2020/08/20 18:26:49 &{0.8001993 {{248 62} {361 119}} car 0.8560907}

❯ GOMAXPROCS=4 ./tiny-yolo-v2-coco data/dog_416x416.jpg
Feedforwarded in: 611.368739ms
Detections:
2020/08/20 18:26:33 &{0.62552494 {{36 40} {313 323}} bicycle 0.9989906}
2020/08/20 18:26:33 &{0.61838317 {{70 153} {211 386}} dog 0.98060095}
2020/08/20 18:26:33 &{0.8001993 {{248 62} {361 119}} car 0.8560907}

❯ GOMAXPROCS=8 ./tiny-yolo-v2-coco data/dog_416x416.jpg
Feedforwarded in: 698.126672ms
Detections:
2020/08/20 18:26:43 &{0.62552494 {{36 40} {313 323}} bicycle 0.9989906}
2020/08/20 18:26:43 &{0.61838317 {{70 153} {211 386}} dog 0.98060095}
2020/08/20 18:26:43 &{0.8001993 {{248 62} {361 119}} car 0.8560907}
```

## One more thing...

## Go is turing complete

So it is easy to create binaries for other plateforms:


```
GOOS=windows go build -o tiny-yolo.exe
GOOS=darwin go build -o tiny-yolo.darwin
GOOS=linux go build -o tiny-yolo.linux
```

and ...


```
GOOS=linux GOARCH=arm GOARM=6 go build -o tiny-yolo-v2-coco.arm6.linux
```

## And it really works

```
raspberrypi ~  ./tiny-yolo-v2-coco.arm.linux data/dog_416x416.jpg
computing...
Feedforwarded in: 2m57.570855173s
Detections:
2020/08/20 17:38:28 &{0.6255249 {{36 40} {313 323}} bicycle 0.9989906}
2020/08/20 17:38:28 &{0.61838335 {{70 153} {211 386}} dog 0.980601}
2020/08/20 17:38:28 &{0.80019933 {{248 62} {361 119}} car 0.85609096}
```

Test it by yourself:

[https://drive.google.com/drive/folders/1CThrmlK-4Z6rIcKpIYX4wmQjU491Utsr?usp=sharing](https://drive.google.com/drive/folders/1CThrmlK-4Z6rIcKpIYX4wmQjU491Utsr?usp=sharinga)

